// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO scheduler (date, title, comment, repeat)
VALUES (?, ?, ?, ?)
RETURNING id, date, title, comment, repeat
`

type CreateTaskParams struct {
	Date    string `json:"date"`
	Title   string `json:"title"`
	Comment string `json:"comment"`
	Repeat  string `json:"repeat"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Scheduler, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Date,
		arg.Title,
		arg.Comment,
		arg.Repeat,
	)
	var i Scheduler
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Title,
		&i.Comment,
		&i.Repeat,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM scheduler
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, date, title, comment, repeat
FROM scheduler
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Scheduler, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Scheduler
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Title,
		&i.Comment,
		&i.Repeat,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, date, title, comment, repeat
FROM scheduler
ORDER BY date
`

func (q *Queries) ListTasks(ctx context.Context) ([]Scheduler, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scheduler
	for rows.Next() {
		var i Scheduler
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Title,
			&i.Comment,
			&i.Repeat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE scheduler
set date = ?,
    title = ?,
    comment = ?,
    repeat = ?
WHERE id = ?
`

type UpdateTaskParams struct {
	Date    string `json:"date"`
	Title   string `json:"title"`
	Comment string `json:"comment"`
	Repeat  string `json:"repeat"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Date,
		arg.Title,
		arg.Comment,
		arg.Repeat,
		arg.ID,
	)
	return err
}
